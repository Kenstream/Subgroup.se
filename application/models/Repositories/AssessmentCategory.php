<?php

namespace Repositories;

use Doctrine\ORM\EntityRepository;

/**
 * AssessmentCategory
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AssessmentCategory extends EntityRepository
{
    const END_NODE_MODE_OVERALL_ONLY    = 'O';
    const END_NODE_MODE_SUB_ONLY        = 'S';
    const END_NODE_MODE_ALL             = 'A';

    public function getMainCategories()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->add('select', 'a')
           ->add('from', 'Entities\AssessmentCategory a')
           ->add('where', "a.parentCategory IS NULL AND a.type='M'");

        return $qb->getQuery()->getResult();
    }

    public function getSelectOptions($skipId = null)
    {
        $mainCategories = $this->getMainCategories();
        $options = array();

        foreach($mainCategories as $mainCategory) {
            $options = $this->recursiveFetchChildAsOptions($mainCategory, $options, 0, $skipId);
        }

        return $options;
    }

    public function getEndNodeCategories($mode = self::END_NODE_MODE_ALL)
    {
        $type = null;

        switch($mode) {
            case self::END_NODE_MODE_OVERALL_ONLY:
                $type = "a.type='O'";
                break;
            case self::END_NODE_MODE_SUB_ONLY:
                $type = "a.type IS NULL";
                break;
            case self::END_NODE_MODE_ALL:
            default:
                $type = "(a.type='O' OR a.type IS NULL)";
                break;
        }

        $queryString = "SELECT a FROM Entities\AssessmentCategory a" .
            " WHERE a.id NOT IN (" .
                "SELECT DISTINCT(b.parentCategory) FROM Entities\AssessmentCategory b" .
                " WHERE b.parentCategory IS NOT NULL)" .
            " AND " . $type .
            " ORDER BY a.sequence ASC";

        $query = $this->_em->createQuery($queryString);

        return $query->getResult();
    }

    public function getEndNodeCategoriesByCategory($category, $endNodeCategories = array())
    {
        if (sizeof($category->getChildCategories()) > 0) {
            foreach($category->getChildCategories() as $childCategory) {
                $endNodeCategories = $this->getEndNodeCategoriesByCategory($childCategory, $endNodeCategories);
            }
        } else {
            $endNodeCategories[] = $category;
        }

        return $endNodeCategories;
    }

    public function getSelectOptionsForScenarioElement()
    {
        $options = array();

        foreach($this->getEndNodeCategories(self::END_NODE_MODE_SUB_ONLY) as $category) {
            $options[$category->getId()] = $category->getName();
        }

        return $options;
    }

    public function getRootCategoryByCategory($category)
    {
        $mainCategory = $category;

        if ($category->getParentCategory())
            $mainCategory = $this->getRootCategoryByCategory($category->getParentCategory());

        return $mainCategory;
    }

    protected function recursiveFetchChildAsOptions($parentCategory, $options = array(), $level = 0, $skipId = null)
    {
        $prefix = '';
        for($i = 0; $i < $level; $i++) $prefix .= '--';

        $options[$parentCategory->getId()] = $prefix . ' ' . $parentCategory->getName();

        if (sizeof($parentCategory->getChildCategories()) > 0) {
            $level += 1;
            foreach($parentCategory->getChildCategories() as $childCategory) {
                if(!is_null($skipId) && $skipId == $childCategory->getId())
                    continue;

                $options = $this->recursiveFetchChildAsOptions($childCategory, $options, $level);
            }
        }

        return $options;
    }
}